package football;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class TeamsApp extends JFrame {

    private static final long serialVersionUID = 1L;

    private static final int MAX_OBJECTS = 12;

    private List<FootballTeams> teams = new ArrayList<>();

    public  TeamsApp() {
        setTitle("Спортивная футбольная команда");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);

        // добавляем несколько объектов в список при запуске приложения
        teams.add(new FootballTeams("Mbappe", "Paris", 178, 73));
        teams.add(new FootballTeams("Kane", "Walthamstow", 188, 81.2));
        teams.add(new FootballTeams("Ronaldo", "Funchal", 187, 83));
        teams.add(new FootballTeams("Haaland", "Leeds", 194, 88.5));
        teams.add(new FootballTeams("Alberto", " Uruguay", 189, 90.1));


        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);

        JMenu mainMenu = new JMenu("Main Menu");
        menuBar.add(mainMenu);

        JMenuItem showAllMenuItem = new JMenuItem("Show all objects");
        mainMenu.add(showAllMenuItem);
        showAllMenuItem.addActionListener(e -> showAllObjects());

        JMenuItem exitMenuItem = new JMenuItem("Exit");
        mainMenu.add(exitMenuItem);
        exitMenuItem.addActionListener(e -> System.exit(0));

        JMenuItem addMenuItem = new JMenuItem("Add object");
        mainMenu.add(addMenuItem);
        addMenuItem.addActionListener(e -> addObject());

        JMenuItem deleteMenuItem = new JMenuItem("Delete object");
        mainMenu.add(deleteMenuItem);
        deleteMenuItem.addActionListener(e -> deleteObject());

        JMenu sortMenu = new JMenu("Sort objects by");
        mainMenu.add(sortMenu);

        JMenuItem sortHeightMenuItem = new JMenuItem("Height");
        sortMenu.add(sortHeightMenuItem);
        sortHeightMenuItem.addActionListener(e -> sortObjectsByHeight());

        JMenuItem sortWeightMenuItem = new JMenuItem("Weight");
        sortMenu.add(sortWeightMenuItem);
        sortWeightMenuItem.addActionListener(e -> sortObjectsByWeight());

        JMenu filterMenu = new JMenu("Filter objects by");
        mainMenu.add(filterMenu);

        JMenuItem filterHeightMenuItem = new JMenuItem("Filter by minimum height");
        filterMenu.add(filterHeightMenuItem);
        filterHeightMenuItem.addActionListener(e -> filterObjectsByHeight());

        JMenu transformMenu = new JMenu("Transform objects");
        mainMenu.add(transformMenu);

        JMenuItem transformWeightMenuItem = new JMenuItem("Transform weight");
        transformMenu.add(transformWeightMenuItem);
        transformWeightMenuItem.addActionListener(e -> transformObjects1());
    }

    private void showAllObjects() {
        StringBuilder sb = new StringBuilder();
        for (FootballTeams team : teams) {
            sb.append(team.toString()).append("\n");
        }
        JOptionPane.showMessageDialog(this, sb.toString(), "All objects", JOptionPane.INFORMATION_MESSAGE);
    }

    private void addObject() {
        if (teams.size() >= MAX_OBJECTS) {
            JOptionPane.showMessageDialog(this, "Maximum number of objects reached", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JTextField sernameField = new JTextField();
        JTextField cityField = new JTextField();
        JTextField heightField = new JTextField();
        JTextField weightField = new JTextField();

        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Sername:"));
        panel.add(sernameField);
        panel.add(new JLabel("City:"));
        panel.add(cityField);
        panel.add(new JLabel("Height:"));
        panel.add(heightField);
        panel.add(new JLabel("Weight:"));
        panel.add(weightField);

        int result = JOptionPane.showConfirmDialog(this, panel, "Add object", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                String sername = sernameField.getText();
                String city =cityField.getText();
                int height = Integer.parseInt(heightField.getText());
                double weight = Double.parseDouble(weightField.getText());

                            FootballTeams team = new FootballTeams(sername, city, height, weight);
                            teams.add(team);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Invalid input", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }

                private void deleteObject() {
                    Object[] options = teams.toArray();
                    Object selectedObject = JOptionPane.showInputDialog(this, "Select an object to delete:", "Delete object", JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
                    if (selectedObject != null) {
                        teams.remove(selectedObject);
                        JOptionPane.showMessageDialog(this, "Object deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                private void sortObjectsByHeight() {
                    Collections.sort(teams, Comparator.comparingInt(FootballTeams::getHeight));
                    JOptionPane.showMessageDialog(this, "Objects sorted by height", "Success", JOptionPane.INFORMATION_MESSAGE);
                }

                private void sortObjectsByWeight() {
                    Collections.sort(teams, Comparator.comparingDouble(FootballTeams::getWeight));
                    JOptionPane.showMessageDialog(this, "Objects sorted by weight", "Success", JOptionPane.INFORMATION_MESSAGE);
                }

                private void filterObjectsByHeight() {
                    String input = JOptionPane.showInputDialog(this, "Enter minimum number of height:");
                    if (input != null) {
                        try {
                            int minHeight = Integer.parseInt(input);
                            List<FootballTeams> filteredClubs = new ArrayList<>();
                            for (FootballTeams team : teams) {
                                if (team.getHeight() >= minHeight) {
                                    filteredClubs.add(team);
                                }
                            }
                            StringBuilder sb = new StringBuilder();
                            for (FootballTeams team : filteredClubs) {
                                sb.append(team.toString()).append("\n");
                            }
                            JOptionPane.showMessageDialog(this, sb.toString(), "Players with at least " + minHeight + " height", JOptionPane.INFORMATION_MESSAGE);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Invalid input", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }

                private void transformObjects1() {
                    StringBuilder message = new StringBuilder();
                    double heightSum = 0;
                    for (FootballTeams team : teams) {
                        double heightInCm = team.getHeight();
                        double heightInInches = heightInCm * 0.3937;
                        team.setHeight(heightInInches);
                        message.append(team.getSername()).append(": ").append(String.format("%.2f", heightInInches)).append(" inches\n");

                        heightSum += heightInInches;
                    }
                    JOptionPane.showMessageDialog(this, message.toString(), "Transformed objects", JOptionPane.INFORMATION_MESSAGE);
                }

                public static void main(String[] args) {
                	TeamsApp app = new TeamsApp();
                    app.setVisible(true);
                }
                }
